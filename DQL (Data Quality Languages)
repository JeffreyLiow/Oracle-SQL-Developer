/* Addition */
select policy_rrp + policy_tp from table;
select policy_rrp,policy_tp,(policy_rrp+policy_tp) as TotalAccount from table
;

/* Top 10 policy_rrp */
select * from table where policy_rrp is not null order by policy_rrp desc fetch next 10 rows only
;

/* According custom order */
select cust_countrycode,count(*) from table group by cust_countrycode 
order by decode(cust_countrycode,'VN',1,'HK',2,'ID',3,'MY',4,'PH',5,'TW',6,'TH',7)
;

/* Limit one row */
select * from table A where rownum=1
union all 
select * from table B where rownum=1
;

/* Search imei result where salesrep_id not null */
select * from table A where imei in 
('1','2') and sales_rep_id is not null
union all
select * from table B where imei in 
('1','2') and sales_rep_id is not null
union all 
select * from table C where imei in 
('1','2') and sales_rep_id is not null
;

/* Search policynumber that have more than 1 */
select count(policynumber), policynumber from table group by policynumber having count(policynumber)>1
;

/* Search policynumber that not in another table */
select * from table A where policynumber not in (select policy_id from table B)
;

/* Join Table where clause */
select * from tableA A
left join tableB B on
A.store_code=B.store_code
where (a.created_date > to_date('20/12/2021','dd/mm/yyyy') and
a.created_date <= to_date('31/12/2021','dd/mm/yyyy')) and
a.store_code is not null and
a.policy_imei in ('1','2','3')
;

/* First time charge */
select servicecontractnumber,ordernumber,timestamp,orderstatus from table
where timestamp < to_date('01/02/2021','dd/mm/yyyy')
order by servicecontractnumber,timestamp
;

/* Calculate month of difference first charge till now vs the actual count */
select servicecontractnumber, min(timestamp), max(timestamp), (round(months_between(current_timestamp,min(timestamp)))+1) as diff_first_last_mth ,count(timestamp) from table
group by servicecontractnumber
;

/* Based on 4/1/22 till 4/2/22 (Last time charge) */
select servicecontractnumber,ordernumber,timestamp,orderstatus from table
where timestamp >= to_date('04/01/2022','dd/mm/yyyy') and
timestamp < to_date('04/02/2022','dd/mm/yyyy')
order by servicecontractnumber,timestamp
;

/* Insert all need to include select * from dual, Date need to add '' */
insert all
into count_stg_master_daily (CoDate,CoCountry,CoStg,CoMaster,Diff) values ('31/3/2022','HK',27541,27532,9)
into count_stg_master_daily (CoDate,CoCountry,CoStg,CoMaster,Diff) values ('31/3/2022','ID',1189082,1189103,-21)
into count_stg_master_daily (CoDate,CoCountry,CoStg,CoMaster,Diff) values ('31/3/2022','MY',177012,173640,3372)
into count_stg_master_daily (CoDate,CoCountry,CoStg,CoMaster,Diff) values ('31/3/2022','PH',2925058,2925060,-2)
into count_stg_master_daily (CoDate,CoCountry,CoStg,CoMaster,Diff) values ('31/3/2022','TW',18850,18844,6)
into count_stg_master_daily (CoDate,CoCountry,CoStg,CoMaster,Diff) values ('31/3/2022','TH',478598,249912,228686)
select * from dual
;

/* When unable to detect variable case when, add on select * from ( ) */
select * from 
(
select policy.policynumber,policy.policystatus,sub."status" as Subscription_status,
case 
    when policy.policystatus='Active' and sub."status"='active' then 'correct'
    when policy.policystatus='Withdrawn' and sub."status"='cancelled' then 'correct'
    when policy.policystatus='OnHold' and sub."status"='active' then 'correct'
    when policy.policystatus='Cancelled' and sub."status"='cancelled' then 'correct'
    when policy.policystatus='InActive' and sub."status"='inactive' then 'correct'
    else 'incorrect'
end as match_status
from dwh.stg_crmz_policy_at policy
left join dwh.STG_CW_EMR_Subscription_AT sub on policy.policynumber=sub."serviceContractId"
)
where match_status in ('incorrect')
;

/* Use exists as join for subquery */
select "orderId" from dwh.STG_CW_EMR_Subscription_AT a where exists (select * from dwh.stg_crmz_policy_at b where a."orderId"=b.ORDERID)
;

/* Convert timestamp to date */
SELECT CAST(SYSTIMESTAMP AS DATE) FROM dual
;

/* Extract Month and Year from Timestamp */
SELECT ORDERID,extract(month from CAST(TRANSACTIONDATETIME AS DATE)) as month,extract(year from CAST(TRANSACTIONDATETIME AS DATE)) as year,status,count(*) 
FROM dwh.stg_crmz_integration_at 
where status in ('CONFIRMED','SUCCESSFUL')
group by ORDERID,extract(month from CAST(TRANSACTIONDATETIME AS DATE)),extract(year from CAST(TRANSACTIONDATETIME AS DATE)),status
having count(*)>1
order by count(*) desc
;

/* NVL == COALESCE (IF NOT NULL 100 ELSE 200) */
SELECT
  NVL(100,200)
FROM
  dual;
-- ==
SELECT
  COALESCE (100, 200)
FROM
  dual
  ;
  
/* Offset example (limit 10 offset 5) */
SELECT UW_NAME, DISPATCH_STATE, DISPATCH_CITY, sum(QUOTATION_REPAIR_TOTAL_COST) from fact_crmz_claims_id
group by UW_NAME, DISPATCH_STATE, DISPATCH_CITY
having sum(QUOTATION_REPAIR_TOTAL_COST)>100000
order by sum(QUOTATION_REPAIR_TOTAL_COST) desc
offset 5 rows fetch next 10 rows only
;


/* Rename cannot apply at where but able apply at order by */
select ORDERID,policyenddate,sysdate,round(policyenddate-sysdate)+1 as diff from dwh.stg_crmz_policy_at where ORDERID not in 
(select "orderId" from dwh.STG_CW_EMR_Subscription_AT) 
order by diff desc;
vs
select ORDERID,policyenddate,sysdate,round(policyenddate-sysdate)+1 as diff from dwh.stg_crmz_policy_at where diff>30; (Error)

/* Trunc with interval 10/3/22 */
select trunc(sysdate, 'yyyy') - interval '4' year from dual; -- 01/01/2018
select trunc(sysdate, 'yyyy') - interval '2' month from dual; -- 01/11/2021
select trunc(sysdate, 'yyyy') - interval '1' day from dual; -- 31/12/2021
select trunc(sysdate, 'dd') from dual; -- 10/03/2022
select trunc(sysdate, 'mm') from dual; -- 01/03/2022

/* Extract last year data */
select extract(year from add_months(sysdate,-12)) y2 from dual; -- 2021

/* INSTR vs LIKE */
UPDATE TEST
SET TYPE = 
case 
    when INSTR(CRON,'policy',1)>0 then 'POLICY'
    when CRON like '%policy%' then 'POLICY'
end    
where INSERT_DATE =  TRUNC(SYSDATE);

/* BETWEEN vs (X< and X>) */
select QUOTAPARTCOSTS,
case 
    when QUOTAPARTCOSTS between 4000 and 10000 then '4000-10000'
    when QUOTAPARTCOSTS>10000 and QUOTAPARTCOSTS<700000 then '10000-700000'
end as segment from dwh.stg_crmz_claims_all;
